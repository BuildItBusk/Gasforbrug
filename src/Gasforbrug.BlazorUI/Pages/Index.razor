@page "/"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedLocalStorage BrowserStorage

<PageTitle>Mit gasforbrug</PageTitle>

<h1>Mit gasforbrug</h1>
<h2>Aflæs</h2>
<EditForm Model="@reading" OnValidSubmit="@AddReading" class="mb-5">
    <p>
        <label for="Date">
            Dato:<br />
            <InputDate id="date" @bind-Value="reading.Date" />
        </label>
    </p>
    <p>
        <label for="Value">
            Aflæst værdi: <br />
            <InputNumber id="value" @bind-Value="reading.Value" />
        </label>
    </p>
    <button id="add-reading" type="submit">Tilføj aflæsning</button>
</EditForm>

<h2>Tidligere aflæst</h2>

<Modal @ref="modalRef">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Slet aflæsning</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <p>
                Er du sikker på du vil slette denne aflæsning? Det er ikke muligt at gendanne den efterfølgende.
            </p>           
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideModal">Fortryd</Button>
            <Button Color="Color.Primary" Clicked="@DeleteReading">Slet</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<div class="container m-lg-5">
    <table class="table">
        <thead>
            <tr>
                <th scope="col">Dato</th>
                <th scope="col" class="text-end">m<sup>3</sup></th>
                <th></th>
            </tr>
        </thead>
        @foreach(var item in allReadings) 
        {
        <tr>
            <td>@item.Date.ToString("d. MMM")</td>
            <td class="text-end">@item.Value.ToString("N3")</td>
             <td><Icon Name="IconName.Remove" Clicked="() => ShowModal(item)" /></td>
        </tr>
        }
    </table>
</div>

@code {
    private Reading reading = new() { Date = DateTime.Now };
    private List<Reading> allReadings = new();
    private Modal? modalRef;
    private Reading? markedForDelete = null; 

    private Task ShowModal(Reading? reading)
    {
        markedForDelete = reading;
        return modalRef?.Show() ?? Task.CompletedTask;
    }

    private Task HideModal()
    {
        markedForDelete = null;
        return modalRef?.Hide() ?? Task.CompletedTask;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        var fromStorage = await BrowserStorage.GetAsync<List<Reading>>("readings");
        var result  = fromStorage.Success ? fromStorage.Value : new List<Reading>();

        if (result is not null)
            allReadings = result;

        StateHasChanged();
    }

    private async Task AddReading()
    {
        allReadings.Add(reading);
        await SaveToBrowserStorage();

        if (reading.Date == default || reading.Value == default)
            throw new Exception("This is bad!");

        reading = new() { Date = DateTime.Now };
    }

    private async Task DeleteReading()
    {
        if (markedForDelete is not null)
            allReadings.Remove(markedForDelete);

        await SaveToBrowserStorage();

        modalRef?.Hide();
    }

    private async Task SaveToBrowserStorage()  => await BrowserStorage.SetAsync("readings", allReadings);

    public sealed class Reading
    {
        public Guid Id { get; set; } = Guid.NewGuid();
        public DateTime Date { get; set; }
        public decimal Value { get; set; }
    }
}