@page "/"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using System.ComponentModel.DataAnnotations
@inject ProtectedLocalStorage BrowserStorage
@inject NotifierService Notifier

<PageTitle>Mit gasforbrug</PageTitle>

<h1>Mit gasforbrug</h1>
<h2>Aflæs</h2>
<Validations @ref="validations" Mode="ValidationMode.Manual" Model="@reading">
    <p>
        <label for="Date">
            Dato:<br />
            <Validation>
                <Field>
                    <DateEdit @bind-Date="reading.Date">
                        <Feedback>
                            <ValidationError />
                        </Feedback>
                    </DateEdit>
                </Field>
            </Validation>
        </label>
    </p>
    <p>
        <label for="reading">
            Aflæst værdi: <br />
            <Validation>
                <Field>
                    <NumericEdit TValue="decimal" @bind-Value="reading.Value">
                        <Feedback>
                            <ValidationError />
                        </Feedback>
                    </NumericEdit>
                </Field>
            </Validation>
        </label>
    </p>
</Validations>

    <Button Color="Color.Primary" Type="ButtonType.Submit" Clicked="@AddReading" id="add-reading">Tilføj aflæsning</Button>

<ReadingsListView />

@code {
    private Reading reading = new() { Date = DateTime.Now };
    private List<Reading> allReadings = new();
    private Reading? markedForDelete = null; 
    private Validations? validations = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        var fromStorage = await BrowserStorage.GetAsync<List<Reading>>("readings");
        var result  = fromStorage.Success ? fromStorage.Value : new List<Reading>();

        if (result is not null)
            allReadings = result;

        StateHasChanged();
    }
 
    private async Task AddReading()
    {
        if (validations is null)
            return;

        if (await validations.ValidateAll())
        {
            allReadings.Add(reading);
            await SaveToBrowserStorage(); 
            await Notifier.Update("readingAdded", 0);
            reading = new() { Date = DateTime.Now };
        }        
    }
        
    private async Task SaveToBrowserStorage()  => await BrowserStorage.SetAsync("readings", allReadings);

    public sealed class Reading
    {
        public Guid Id { get; set; } = Guid.NewGuid();

        [Required]
        public DateTime Date { get; set; }

        [Required]
        [Range(1, int.MaxValue, ErrorMessage = "Skal være et positivt tal.")]
        public decimal Value { get; set; }
    }
}