@using Gasforbrug.BlazorUI.Data
@using Gasforbrug.BlazorUI.Infrastructure
@inject NotifierService Notifier
@inject ReadingRepository BrowserStorage

<h2 class="mt-5">Tidligere aflæst</h2>

<Modal @ref="modalRef">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Slet aflæsning</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <p>
                Er du sikker på du vil slette denne aflæsning? Det er ikke muligt at gendanne den efterfølgende.
            </p>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideModal">Fortryd</Button>
            <Button Color="Color.Primary" Clicked="@DeleteReading">Slet</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<div class="container m-lg-5">
    <table class="table">
        <thead>
            <tr>
                <th scope="col">Dato</th>
                <th scope="col" class="text-end">m<sup>3</sup></th>
                <th scope="col" class="text-end">
                    <span class="oi oi-arrow-circle-top" data-toggle="tooltip" title="Siden sidste aflæsning"></span>
                </th>
                <th></th>
            </tr>
        </thead>
        @for (int i = 0; i < allReadings.Count; i++)
        {
            var reading = allReadings[i];
            var date = reading.Date.ToString("d. MMM");
            var value = reading.Value.ToString("N3");
            var diff = i > 0 ?
            (reading.Value - allReadings[i - 1].Value).ToString("N3") :
                string.Empty;

            <tr>
                <td class="align-middle">@date</td>
                <td class="text-end align-middle">@value</td>
                <td class="text-end align-middle">@diff</td>
                <td><Icon Name="IconName.Delete" Clicked="() => ShowModal(reading)" /></td>
            </tr>
        }
    </table>
</div>

@code {
    private List<ReadingStorageModel> allReadings = new();
    private Modal? modalRef;
    private ReadingStorageModel? markedForDelete = null;

    protected override void OnInitialized()
    {
        Notifier.Notify += OnNotify;
    }

    private async Task OnNotify(string key, int value)
    {
        allReadings = await BrowserStorage.Get();
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        allReadings = await BrowserStorage.Get();
        StateHasChanged();
    }

    private Task ShowModal(ReadingStorageModel? reading)
    {
        markedForDelete = reading;
        return modalRef?.Show() ?? Task.CompletedTask;
    }

    private Task HideModal()
    {
        markedForDelete = null;
        return modalRef?.Hide() ?? Task.CompletedTask;
    }

    private async Task DeleteReading()
    {
        if (markedForDelete is not null)
            await BrowserStorage.Remove(markedForDelete.Id);

        modalRef?.Hide();
    }
}
